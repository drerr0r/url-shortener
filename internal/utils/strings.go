// internal/utils/strings.go

package utils

import (
	"crypto/rand" // üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–µ–Ω math/rand –Ω–∞ crypto/rand
	"encoding/base64"
)

// GenerateRandomString –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
// üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω–µ–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π math/rand –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π crypto/rand
func GenerateRandomString(length int) string {
	b := make([]byte, length)

	// –ë–´–õ–û: rand.Read(b) // math/rand - –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ
	// –°–¢–ê–õ–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ crypto/rand –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	_, err := rand.Read(b)
	if err != nil {
		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å proper error handling
		panic("failed to generate random string: " + err.Error())
	}

	return base64.URLEncoding.EncodeToString(b)[:length]
}

// IsValidShortCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞
func IsValidShortCode(code string) bool {
	if len(code) < 4 || len(code) > 12 {
		return false
	}

	for _, char := range code {
		if !((char >= 'a' && char <= 'z') ||
			(char >= 'A' && char <= 'Z') ||
			(char >= '0' && char <= '9') ||
			char == '-' || char == '_') {
			return false
		}
	}

	return true
}

// TruncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func TruncateString(s string, length int) string {
	if len(s) <= length {
		return s
	}
	return s[:length]
}
